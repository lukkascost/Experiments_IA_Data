// <auto-generated />
using System;
using ExperimentsData.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExperimentsData.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210202162257_roundsInSample")]
    partial class roundsInSample
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.3.20181.2");

            modelBuilder.Entity("ExperimentsData.Models.DAO.AttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SampleEntityId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<int>("order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("SampleEntityId", "order");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ExperimentsData.Models.DAO.DatasetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("name");

                    b.ToTable("Datasets");
                });

            modelBuilder.Entity("ExperimentsData.Models.DAO.ExperimentRoundEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DatasetId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SampleEntityId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DatasetId");

                    b.HasIndex("SampleEntityId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("ExperimentsData.Models.DAO.SampleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DatasetEntityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExtractorType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("label")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("DatasetEntityId", "OriginalFileName");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("ExperimentsData.Models.DAO.AttributeEntity", b =>
                {
                    b.HasOne("ExperimentsData.Models.DAO.SampleEntity", "SampleEntity")
                        .WithMany("Attributes")
                        .HasForeignKey("SampleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExperimentsData.Models.DAO.ExperimentRoundEntity", b =>
                {
                    b.HasOne("ExperimentsData.Models.DAO.DatasetEntity", "Dataset")
                        .WithMany()
                        .HasForeignKey("DatasetId");

                    b.HasOne("ExperimentsData.Models.DAO.SampleEntity", null)
                        .WithMany("Rounds")
                        .HasForeignKey("SampleEntityId");
                });

            modelBuilder.Entity("ExperimentsData.Models.DAO.SampleEntity", b =>
                {
                    b.HasOne("ExperimentsData.Models.DAO.DatasetEntity", "DatasetEntity")
                        .WithMany("Samples")
                        .HasForeignKey("DatasetEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
